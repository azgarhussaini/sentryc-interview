schema {
    query: Query
}

type Query {
    marketplaces: [Marketplace!]!
    producers: [Producer!]!
    sellerInfos: [SellerInfo!]!
    sellers: [Seller!]!
     sellersGraphQl(filter: SellerFilter, sortBy: SellerSortBy):  [Seller!]!
#    sellersGraphQl(filter: SellerFilter, page: PageInput!): SellerPageableResponse!
}


type Seller {
    id: ID!
    sellerName: String!
    state: SellerState!
    producerId: Producer!
    sellerInfoId: SellerInfo!
}

type SellerInfo {
    id: ID!
    marketplaceName: String!
    url: String!
    country: String
    externalId: String
    marketplaceId: Marketplace!
}

type Marketplace {
    id: ID!
    description: String
    marketplaceLogo: String
}

type Producer {
    id: ID!
    producerName: String!
    createdAt: String!
    producerLogo: String
}

enum SellerSortBy {
    SELLER_INFO_EXTERNAL_ID_ASC
    SELLER_INFO_EXTERNAL_ID_DESC
    NAME_ASC
    NAME_DESC
    MARKETPLACE_ID_ASC
    MARKETPLACE_ID_DESC
}

enum SellerState {
    REGULAR
    WHITELISTED
    GREYLISTED
    BLACKLISTED
}


input SellerFilter {
    id: ID
    sellerName: StringQueryOperatorInput
    state: StringQueryOperatorInput
}

input SellerInfoFilter {
    id: ID
    marketplaceName: StringQueryOperatorInput
    url: StringQueryOperatorInput
    country: StringQueryOperatorInput
    externalId: StringQueryOperatorInput
}
input ProducerFilter {
    id: ID
    producerName: StringQueryOperatorInput
    createdAt: StringQueryOperatorInput
    producerLogo: StringQueryOperatorInput
}

input MarketplaceFilter {
    id: ID
    description: StringQueryOperatorInput
    marketplaceLogo: StringQueryOperatorInput
}

input StringQueryOperatorInput {
    eq: String
    ne: String
    in: [String]
    nin: [String]
    regex: String
    glob: String
}

input PageInput {
    page: Int!
    size: Int!
}

type PageMeta {
    totalPages: Int!
    totalItems: Int!
    currentPage: Int!
    hasNextPage: Boolean!
    hasPreviousPage: Boolean!
}

type SellerPageableResponse {
    meta: PageMeta!
    data: [Seller!]!
}
