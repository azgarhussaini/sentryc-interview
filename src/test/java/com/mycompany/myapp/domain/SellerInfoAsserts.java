package com.mycompany.myapp.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class SellerInfoAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerInfoAllPropertiesEquals(SellerInfo expected, SellerInfo actual) {
        assertSellerInfoAutoGeneratedPropertiesEquals(expected, actual);
        assertSellerInfoAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerInfoAllUpdatablePropertiesEquals(SellerInfo expected, SellerInfo actual) {
        assertSellerInfoUpdatableFieldsEquals(expected, actual);
        assertSellerInfoUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerInfoAutoGeneratedPropertiesEquals(SellerInfo expected, SellerInfo actual) {
        assertThat(expected)
            .as("Verify SellerInfo auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerInfoUpdatableFieldsEquals(SellerInfo expected, SellerInfo actual) {
        assertThat(expected)
            .as("Verify SellerInfo relevant properties")
            .satisfies(e -> assertThat(e.getMarketplaceName()).as("check marketplaceName").isEqualTo(actual.getMarketplaceName()))
            .satisfies(e -> assertThat(e.getUrl()).as("check url").isEqualTo(actual.getUrl()))
            .satisfies(e -> assertThat(e.getCountry()).as("check country").isEqualTo(actual.getCountry()))
            .satisfies(e -> assertThat(e.getExternalId()).as("check externalId").isEqualTo(actual.getExternalId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertSellerInfoUpdatableRelationshipsEquals(SellerInfo expected, SellerInfo actual) {
        assertThat(expected)
            .as("Verify SellerInfo relationships")
            .satisfies(e -> assertThat(e.getMarketplaceId()).as("check marketplaceId").isEqualTo(actual.getMarketplaceId()));
    }
}
